[root@iZuf64jc5vsu5f8fas5h6oZ conf]# cat nginx.conf.bak 
#运行用户
#user  nobody;
#启动进行 通常设置和服务器cpu数量相同
worker_processes  1;
#全局错误日志及pid文件
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

#工作模式及连接数上限
events {
    #accept_mutex on; #设置网路连接序列化，防止惊群现象发生，默认为on    
    
    #multi_accept on; #设置一个进程是否同时接受多个网络连接，默认为off

    # use [ kqueue | rtsig | epoll | /dev/poll | select | poll ] ;
    # 具体内容查看 http://wiki.codemongers.com/事件模型    
    # 使用哪种需要知道这几个模式有什么用，在什么情况下使用
   
    use epoll; 


    ##单个后台worker process进程的最大并发链接数
        # 并发总数是 worker_processes 和 worker_connections 的乘积
    # 即 max_clients = worker_processes * worker_connections
    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4
    worker_connections  1024;
    

    #keepalive_timeout 60; 
    #keepalive超时时间。 这里指的是http层面的keep-alive 并非tcp的keepalive 。

    #client_header_buffer_size 4k;
    #客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为系统分页大小。

    #open_file_cache max=2000 inactive=60s;
    # 为打开文件指定缓存，默认是没有启用的，max指定缓存最大数量，建议和打开文件数一致，
    #inactive是指经过多长时间文件没被请求后删除缓存 打开文件最大数量为我们再main配置的worker_rlimit_nofile参数
   
    #open_file_cache_valid 60s;
    #这个是指多长时间检查一次缓存的有效信息。如果有一个文件在inactive时间内一次没被使用，它将被移除

    #open_file_cache_min_uses 1;
    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如果有一个文件在inactive时间内一次没被使用，它将被移除。
}


http {
     #设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;

    #设定日志格式
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    #对于普通应用，必须设为 on,
    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;
   
    #连接超时时间 
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #设定请求缓冲
    #client_header_buffer_size    128k;
    #large_client_header_buffers  4 128k;

   
    #负载均衡配置不同地址的配置
    #这个myproject会和server中配置反向代理地址相同
    #配置负载均衡算法
    #1.weight轮询(默认，常用)：接收到的请求按照权重分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，
    #  Nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值(weight)，
    #  用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。
    
    #2.ip_hash（常用）：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，
    #  这也在一定程度上解决了集群部署环境下session共享的问题。
    
    #3.fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，
    #  响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是Nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块。
    
    #4.url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在Nginx作为静态服务器的情况下提高缓存效率。
    #  同样要注意Nginx默认不支持这种调度算法，要使用的话需要安装Nginx的hash软件包。
    #upstream myproject {
    # 反向代理 被动服务器健康检查
    #   [代表一个服务] [被代理的ip 端口] [ weight 权重 越大被选择的机会越大][被动服务器检查 max_fails 特定时间时间内连续不成功次数，默认1，0则禁用对改服务器的运行状况检查
        大于1时 则后续失败必须在规定时间完成，以便计数和设置次数进行比较。此时间由fail_timeout设置，该参数换定义服务器被视为失败时间。默认10s ] 标记为失败，在特定时间已过后，nginx重新进
        性正常探测。探测成功则将服务器再次标记为实时并且正常包含到负载均衡中
    #   server ip:port [weight=? max_fails=? fail_timeout=?]
    #   server 127.0.0.1:8000 weight=3;
    #   server 127.0.0.1:8001;
    #   server 127.0.0.1:8002;
    #   server 127.0.0.1:8003;
    #}

   
         


    #应该可以有多个server   

    # 很重要的虚拟主机配置
    server {
        #监听端口
        listen       80;
        #定义使用改配置访问
        server_name  90java.com localhost;
        #定义服务器默认网站根目录位置
        #root html          

 
        #charset koi8-r;
        #设置笨虚拟主机的访问日志
        #access_log  logs/host.access.log  main;

        #默认请求 / 
        location / {
            #这里可以认为html文件为访问根目录
            root   html;
            ##定义首页索引文件的名称
            index  index.html index.htm;
          
             

            #可以设置代理地址
            #proxy_pass http://myproject; 这个myproject和负载均衡对应上


        }
        #错误404页面
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #

        #禁止访问.htxxx文件          
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}